<?php

namespace App\Controller;

use App\Services\CourseServices;
use App\Services\CurlServices;
use Pimcore\Model\DataObject;
use Pimcore\Model\Document;
use Pimcore\Navigation\Container;
use Pimcore\Twig\Extension\Templating\Placeholder;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;

class AcademyController extends BaseController
{

    public function planning($obj){

        $result = [];

            foreach ($obj as $value){

                $planning = [];
                $planning = [
                    'startDate' => $value->getStartDate() ? date('d M, Y',strtotime($value->getStartDate())) : '',
                    'lastDate' => $value->getLastDate() ? date('d M, Y',strtotime($value->getLastDate())) : '',
                    'datePlanning' => $value->getDatePlaning() ?? "",
                ];

                $timePlanningArr = [];
                if ($value->getTeachingArrangement()){
                    foreach ($value->getTeachingArrangement() as $timePlanning){

                        $timePlanningArr[] = [
                            'startTime' => $timePlanning['startTime']->getData() ? date('h:i a',strtotime($timePlanning['startTime']->getData())) : '',
                            'lastTime' => $timePlanning['lastTime']->getData() ? date('h:i a',strtotime($timePlanning['lastTime']->getData())) : '',
                            'timePlanning' => $timePlanning['timePlanning'] ?  $timePlanning['timePlanning']->getData() : '',
                        ];


                    }

                }

                $planning['teachingArrangement'] = $timePlanningArr;

                $result[] = $planning;
            }

            return $result;

    }

    /**
     * @Route ("/api/getCourses")
     * @param Request $request
     * @return JsonResponse
     */
    public function getCoursesAction(Request $request){

        $filter = $request->request->get('filter');
        $filterDate = $request->request->get('filterDate');

        $filter = json_decode($filter,true);


        $coursesObj = new DataObject\Course\Listing();
        if (isset($filter['academyType'])){
            $coursesObj->filterByAcademyType($filter['academyType']);
        }
        if (isset($filter['eventType'])){
            $coursesObj->filterByEventType($filter['eventType']);
        }
        if (isset($filter['topic'])){
            $coursesObj->filterByTopic($filter['topic']);
        }
        if (isset($filter['level'])){
            $coursesObj->filterByLevel($filter['level']);
        }

	if (isset($filter['fee'])){
            $coursesObj->filterByFee($filter['fee']);
        }
        $coursesObj->load();

        $coursesData = [];
        foreach ($coursesObj as $course){
            $coursesData[$course->getId()] = [
                'id'    => $course->getId(),
                'title' => $course->getTitle(),
                'planningStr' => $this->planning($course->getPlaning()),
                'planning' => $course->getPlaning(),
                'level' => $course->getLevel(),
                'venue' => $course->getVenue(),
                'eventType' => $course->getEventType(),
                'fullpath'  => $course->getFullPath(),
                /*'video'    => $course->getVideo(),*/
                /*'pendant'  => $course->getTextData(),*/
                'viewUrl'  => $course->getViewUrl(),
                'coverImage' => $course->getCoverImage() ? $course->getCoverImage()->getThumbnail()->getPath() : '',
            ];

        }


        $conditions = [];
        foreach ($coursesData as $k => $v){
            $id = $v['id'];
            if (isset($v['planning']) && !empty($v['planning']))
            {
                foreach ($v['planning'] as $value){
                    if ($value->getStartDate()){
                        array_push($conditions,[
                            'id' => $id,
                            'date' => strtotime($value->getStartDate())
                        ]);
                    }

                }
            }
        }

        $last_names = array_column($conditions,'date');
        array_multisort($last_names,SORT_ASC,$conditions);

        $ids = array_unique(array_column($conditions,'id'));

        $filterDateIds = [];
        if ($filterDate){
            $filterDate = $filterDate/1000;
            foreach ($coursesData as $k => $v){
                $id = $v['id'];
                if (isset($v['planning']) && !empty($v['planning']))
                {
                    foreach ($v['planning'] as $value){

                       

                            if (strtotime($value->getStartDate()) == $filterDate){

                                array_push($filterDateIds,$id);
                            }
                        

                    }
                }
            }

        }

        $result = [];
        if ($filterDate){
            foreach ($ids as $id){
                if (in_array($id,$filterDateIds)){
                    $result[] = $coursesData[$id];
                }
            }

        }else{
            foreach ($ids as $id){
                if (isset($coursesData[$id])){
                    $result[] = $coursesData[$id];
                    unset($coursesData[$id]);
                }
            }
            $result = array_merge($result,$coursesData);
        }

        return new JsonResponse([
            'total' => count($result),
            'data' => $result
        ]);
    }
    public function indexAction(Request $request){

        return $this->redirect('academy/overview');

    }

    /**
     *
     * @Route("/academy/{menuType}/{course}{id}",requirements={"id"="_\d+"} )
     * @param Request $request
     */
    public function couserDetailAction(Request $request,$menuType,$id)
    {
	$id = trim($id,'_');
        //dump(Document::getById(1)->getFullPath());
        $event = DataObject\Course::getById($id);

        $data = [
            'title' => $event->getTitle(),
            'content' => $event->getContent(),
            'planning' => $event->getPlaning(),
            'level' => $event->getLevel(),
            'venue' => $event->getVenue(),
            'eventType' => $event->getEventType(),
            'program' => $event->getOverview(),
            'courseFee' => $event->getCourseFeesData(),
            'contacts' => $event->getContact(),
            'objects'  => $event->getLerningObjects(),
            'crowds'   => $event->getCrowdData(),
            'manual'   => $event->getManual(),
            'comments' => $event->getComments(),
            'video'    => $event->getVideo(),
	    'videoTitle' => $event->getVideoTitle(),
            'register' => $event->getRegisterLinks(),
            'speaker'  => $event->getSpeakerData(),
            'interestList' => $event->getInterestedList(),
            'pendant'  => $event->getTextData(),
            'viewUrl'  => $event->getViewUrl(),
            'coverImage' => $event->getCoverImage(),
            'backGround' => $event->getBackGround(),
            'academyType' => $event->getAcademyType(),
	        'partner'    => $event->getLogos(),
	    'interestedTitle' => $event->getInterestedTitle(),
	    'interestedRegister' => $event->getInterestedRegister(),
            'urlType'    => $menuType
            /*'paneList' => $event->get(),
            'interestedList' => $event->getInterestedList(),*/
        ];

        $baseUrl = $request->getSchemeAndHttpHost().'/';
        $refer = $request->server->get('HTTP_REFERER');

      


        return $this->render('academy/detail.html.twig',[
            'detail' => $data,
           /* 'bread'  => $bread*/
        ]);

    }

    /**
     * @param Request $request
     * @return mixed
     */
    public function overviewAction(Request $request)
    {
        $courseDemand = new DataObject\Course\Listing();

        $courseDemand->load();

        $data = [
            'professionals' => [],
            'officers' => [],
            'enterprises' => [],
            'studies' => [],
        ];
        foreach ($courseDemand as $item){

            if (count($data['professionals']) < 3){
                if( $item->getAcademyType() == 'IP Professionals'){
                    $data['professionals'][] = $item;
                }
            }


            if(count($data['officers']) < 3){
                if($item->getAcademyType() == 'Public Agencies / Officers'){
                    $data['officers'][] = $item;
                }
            }

            if(count($data['enterprises']) < 3){
                if($item->getAcademyType() == 'Enterprises / Individuals'){
                    $data['enterprises'][] = $item;
                }
            }

            if(count($data['studies']) < 3){
                if($item->getAcademyType() == 'Graduate Studies'){
                    $data['studies'][] = $item;
                }
            }


        }

        return $this->render('academy/overview.html.twig',[
            'list' => $data
        ]);
    }



    public function enterpriseAction(Request $request)
    {

        $academyType = 'Enterprises / Individuals';
        $result = (new CourseServices())->getCurses($academyType);
        $result['academyType'] = $academyType;
        return $this->render('academy/courses.html.twig',[
            'ret' => $result
        ]);
    }


    /**
     * @route ("/api/getPicker")
     * @return JsonResponse
     */
    public function getDatePickerAction(Request $request){

        $academyCourseType = $request->request->get('academyType');
        $url = parent::GRAPHQL_URL.'/pimcore-graphql-webservices/academy?apikey=079eb73af99d72172ab6f349bbad36bb';

        $ar = [
            'query' => '{
  getCourseListing(defaultLanguage : "en" ,filter : "{\"academyType\" : \"'.$academyCourseType.'\"}"){
    edges{
      node{
        id

        planing{
          ... on fieldcollection_ProgramPlanning{
            startDate
            lastDate

          }
        }
      }
    }
  }
}'
        ];


        $curl = new CurlServices();
        $data = $curl->posturl($url,$ar);


        $result = [];

        foreach ($data['data']['getCourseListing']['edges'] as $k => $v){
            $id = $v['node']['id'];
            if (isset($v['node']['planing']) && !empty($v['node']['planing'])){
                foreach ($v['node']['planing'] as $value){
                    if ($value['startDate']){
                        $result[] = [
                            'id' => $id,
                            'start' => $value['startDate'],
                            'last'  => $value['lastDate']
                        ];
                    }

                }
            }

        }

        $ret = array_unique(array_column($result,'start'));
	
        return new JsonResponse($ret);
    }


    public function ipProfessionalAction(Request $request)
    {

        $academyType = 'IP Professionals';
        $result = (new CourseServices())->getCurses($academyType);
        $result['academyType'] = $academyType;
        return $this->render('academy/courses.html.twig',[
            'ret' => $result
        ]);

    }

    public function publicAgenciesAction(Request $request)
    {

        $academyType = 'Public Agencies / Officers';
        $result = (new CourseServices())->getCurses($academyType);
        $result['academyType'] = $academyType;
        return $this->render('academy/courses.html.twig',[
            'ret' => $result
        ]);
    }


    public function graduateStudiesAction(Request $request)
    {

        $academyType = 'Graduate Studies';
        $result = (new CourseServices())->getCurses($academyType);
        $result['academyType'] = $academyType;
        return $this->render('academy/courses.html.twig',[
            'ret' => $result
        ]);
    }


}
