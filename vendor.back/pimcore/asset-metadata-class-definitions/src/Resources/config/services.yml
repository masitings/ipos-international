services:

    _defaults:
        autowire: true
        autoconfigure: true
        public: false


    Pimcore\AssetMetadataClassDefinitionsBundle\Command\:
        resource: '../../Command'
        tags: ['console.command']

    # auto-register all controllers as services
    Pimcore\AssetMetadataClassDefinitionsBundle\Controller\:
        resource: '../../Controller'
        public: true
        tags: ['controller.service_arguments']

    # The migration installer needs the bundle it is operating on upon construction to be able to build its migration configuration.
    # As bundles can't be directly used as service argument, we need to make use of the expression language to fetch the bundle
    # from the kernel upon construction.
    Pimcore\AssetMetadataClassDefinitionsBundle\Installer:
        public: true
        arguments:
            # fetch the bundle via expression language
            $bundle: "@=service('kernel').getBundle('PimcoreAssetMetadataClassDefinitionsBundle')"


    pimcore_asset_metadata_classdefinitions.implementation_loader.data:
        class: Pimcore\AssetMetadataClassDefinitionsBundle\Loader\DataLoader
        public: true

    pimcore_asset_metadata_classdefinitions.implementation_loader.layout:
        class: Pimcore\AssetMetadataClassDefinitionsBundle\Loader\LayoutLoader
        public: true


    pimcore_asset_metadata_classdefinitions.event_listener.main_listener:
        autowire: true
        class:  Pimcore\AssetMetadataClassDefinitionsBundle\EventListener\MainListener
        tags:
            - { name: kernel.event_subscriber }